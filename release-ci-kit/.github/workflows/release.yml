name: Release (Build → Push → Deploy Blue/Green)

on:
  push:
    tags:
      - 'v*'        # deploy cuando se taggea vX.Y.Z
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag a desplegar (vX.Y.Z). Si vacío y el trigger es por tag, se usa el tag de git.'
        required: false
      color:
        description: 'Color a activar (green|blue)'
        type: choice
        options: [green, blue]
        required: false
        default: green

env:
  REGISTRY: ghcr.io
  IMAGE_WEB: ghcr.io/${{ github.repository_owner }}/agro-web
  IMAGE_API: ghcr.io/${{ github.repository_owner }}/agro-api

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      color: ${{ steps.vars.outputs.color }}
    steps:
      - name: Compute version & color
        id: vars
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            V="${GITHUB_REF_NAME}"
          else
            V="${{ github.event.inputs.tag }}"
          fi
          if [ -z "$V" ]; then
            echo "No tag provided or detected. Provide one in workflow_dispatch." >&2
            exit 1
          fi
          C="${{ github.event.inputs.color }}"
          if [ -z "$C" ]; then C="green"; fi
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "color=$C" >> "$GITHUB_OUTPUT"
          echo "Using version=$V color=$C"

  build:
    needs: meta
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # para publicar en GHCR con GITHUB_TOKEN
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Web
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy-caddy/Dockerfile.web
          push: true
          tags: |
            ${{ env.IMAGE_WEB }}:${{ needs.meta.outputs.version }}
            ${{ env.IMAGE_WEB }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Build & Push API
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy-caddy/Dockerfile.api
          push: true
          tags: |
            ${{ env.IMAGE_API }}:${{ needs.meta.outputs.version }}
            ${{ env.IMAGE_API }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    needs: [meta, build]
    runs-on: ubuntu-latest
    steps:
      - name: SSH into server and deploy (Blue/Green)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            export IMAGE_WEB="${{ env.IMAGE_WEB }}"
            export IMAGE_API="${{ env.IMAGE_API }}"
            export TAG="${{ needs.meta.outputs.version }}"
            export COLOR="${{ needs.meta.outputs.color }}"
            export ACTOR="${{ github.actor }}"

            echo "[deploy] login ghcr"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${ACTOR}" --password-stdin

            echo "[deploy] pull images"
            docker pull "${IMAGE_WEB}:${TAG}"
            docker pull "${IMAGE_API}:${TAG}"

            echo "[deploy] go to deploy path"
            cd "${{ secrets.DEPLOY_PATH }}"

            echo "[deploy] enable caddy blue/green (idempotente)"
            if [ -f scripts/bluegreen/enable_proxy.sh ]; then
              scripts/bluegreen/enable_proxy.sh
            else
              echo "ERROR: scripts/bluegreen/enable_proxy.sh no existe en el servidor" >&2
              exit 1
            fi

            echo "[deploy] switch to ${COLOR}"
            WEB_IMAGE="${IMAGE_WEB}" API_IMAGE="${IMAGE_API}" TAG="${TAG}" PROJECT_NAME="agro" scripts/bluegreen/switch.sh "${COLOR}"

            echo "[deploy] done."
